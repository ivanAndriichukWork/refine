{"version":3,"sources":["reportWebVitals.ts","hasura/index.ts","pages/posts/list.tsx","pages/taxonomy/list.tsx","pages/taxonomy/edit.tsx","pages/taxonomy/create.tsx","pages/regions/edit.tsx","pages/regions/list.tsx","pages/regions/create.tsx","pages/posts/create.tsx","pages/posts/edit.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","generateSorting","sorting","sortingQueryResult","forEach","sortItem","field","order","hasuraFilters","eq","ne","lt","gt","lte","gte","in","nin","contains","ncontains","containss","ncontainss","null","generateFilters","filters","resultFilter","filter","operator","value","dataProvider","client","getOne","a","resource","id","metaData","operation","gql","variables","term_id","type","required","fields","query","request","response","data","getMany","ids","where","_in","result","getList","sort","pagination","current","limit","pageSize","offset","hasuraSorting","aggreateOperation","hasuraSortingType","hasuraFiltersType","order_by","aggregate","total","count","create","insertOperation","insertType","console","log","object","Object","keys","gqlVariables","createMany","objects","returning","update","updateOperation","pkColumnsType","setInputType","pk_columns","_set","updateMany","whereType","deleteOne","deleteOperation","deleteMany","getApiUrl","Error","custom","url","method","headers","gqlClient","GraphQLClient","PostList","useTable","initialSorter","tableProps","sorter","pageHeaderProps","extra","rowKey","Column","dataIndex","title","multiple","defaultSortOrder","getDefaultSortOrder","render","_","record","hideText","size","recordItemId","ID","TaxList","slug","TaxEdit","useForm","formProps","saveButtonProps","layout","Item","label","name","rules","TaxCreate","RegionEdit","RegionList","useState","testData","EditTestData","initialFilter","onExpand","e","array_terms","term","array_terms_parent","dataSource","dataFunctin","expandable","expandedRowRender","rowExpandable","description","RegionCreate","action","mutate","useCreateMany","setSlug","categorySelectProps","useSelect","optionLabel","optionValue","selectProps","onFinish","values","onChange","target","slugify","valuePropName","initialValue","hidden","defaultValue","PostCreate","queryResultRegion","queryResult","options","fieldNames","children","style","width","EditPost","gqlDataProvider","App","routerProvider","resources","list","edit","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50153523.chunk.js","sourcesContent":["import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { GraphQLClient } from \"graphql-request\";\nimport * as gql from \"gql-query-builder\";\nimport {\n    CrudOperators,\n    CrudFilters,\n    CrudSorting,\n    DataProvider,\n} from \"@pankod/refine\";\n\nexport type HasuraSortingType = Record<string, \"asc\" | \"desc\">;\n\nexport type GenerateSortingType = {\n    (sorting?: CrudSorting): HasuraSortingType | undefined;\n};\n\nexport const generateSorting: GenerateSortingType = (sorting?: CrudSorting) => {\n    if (!sorting) {\n        return undefined;\n    }\n\n    const sortingQueryResult: Record<string, \"asc\" | \"desc\"> = {};\n\n    sorting.forEach((sortItem) => {\n        sortingQueryResult[sortItem.field] = sortItem.order;\n    });\n\n    return sortingQueryResult as HasuraSortingType;\n};\n\nexport type HasuraFilterCondition =\n    | \"_and\"\n    | \"_not\"\n    | \"_or\"\n    | \"_eq\"\n    | \"_gt\"\n    | \"_gte\"\n    | \"_lt\"\n    | \"_lte\"\n    | \"_neq\"\n    | \"_in\"\n    | \"_nin\"\n    | \"_like\"\n    | \"_nlike\"\n    | \"_ilike\"\n    | \"_nilike\"\n    | \"_is_null\";\n\nconst hasuraFilters: Record<CrudOperators, HasuraFilterCondition> = {\n    eq: \"_eq\",\n    ne: \"_neq\",\n    lt: \"_lt\",\n    gt: \"_gt\",\n    lte: \"_lte\",\n    gte: \"_gte\",\n    in: \"_in\",\n    nin: \"_nin\",\n    contains: \"_ilike\",\n    ncontains: \"_nilike\",\n    containss: \"_like\",\n    ncontainss: \"_nlike\",\n    null: \"_is_null\",\n};\n\nexport const generateFilters: any = (filters?: CrudFilters) => {\n    if (!filters) {\n        return undefined;\n    }\n\n    const resultFilter: any = {};\n\n    filters.forEach((filter) => {\n        resultFilter[filter.field] = {};\n        resultFilter[filter.field][hasuraFilters[filter.operator]] =\n            filter.value;\n    });\n\n    return resultFilter;\n};\n\nconst dataProvider = (client: GraphQLClient): DataProvider => {\n    return {\n        getOne: async ({ resource, id, metaData }) => {\n            const operation = `${metaData?.operation ?? resource}_by_pk`;\n\n            const { query, variables } = gql.query({\n                operation,\n                variables: {\n                    term_id: { value: id, type: \"bigint\", required: true },\n                    ...metaData?.variables,\n                },\n                fields: metaData?.fields,\n            });\n\n            const response = await client.request(query, variables);\n\n            return {\n                data: response[operation],\n            };\n        },\n\n        getMany: async ({ resource, ids, metaData }) => {\n            const operation = metaData?.operation ?? resource;\n\n            const { query, variables } = gql.query({\n                operation,\n                fields: metaData?.fields,\n                variables: metaData?.variables ?? {\n                    where: {\n                        type: `${operation}_bool_exp`,\n                        value: {\n                            id: {\n                                _in: ids,\n                            },\n                        },\n                    },\n                },\n            });\n\n            const result = await client.request(query, variables);\n\n            return {\n                data: result[operation],\n            };\n        },\n\n        getList: async ({ resource, sort, filters, pagination, metaData }) => {\n            const current = pagination?.current ?? 1;\n            const limit = pagination?.pageSize || 10;\n            const offset = (current - 1) * limit;\n\n            const hasuraSorting = generateSorting(sort);\n            const hasuraFilters = generateFilters(filters);\n\n            const operation = metaData?.operation ?? resource;\n\n            const aggreateOperation = `${operation}_aggregate`;\n\n            const hasuraSortingType = `[${operation}_order_by!]`;\n            const hasuraFiltersType = `${operation}_bool_exp`;\n\n            const { query, variables } = gql.query([\n                {\n                    operation,\n                    fields: metaData?.fields,\n                    variables: {\n                        limit,\n                        offset,\n                        ...(hasuraSorting && {\n                            order_by: {\n                                value: hasuraSorting,\n                                type: hasuraSortingType,\n                            },\n                        }),\n                        ...(hasuraSorting && {\n                            where: {\n                                value: hasuraFilters,\n                                type: hasuraFiltersType,\n                            },\n                        }),\n                    },\n                },\n                {\n                    operation: aggreateOperation,\n                    fields: [{ aggregate: [\"count\"] }],\n                },\n            ]);\n\n            const result = await client.request(query, variables);\n\n            return {\n                data: result[operation],\n                total: result[aggreateOperation].aggregate.count,\n            };\n        },\n\n        create: async ({ resource, variables, metaData }) => {\n            const operation = metaData?.operation ?? resource;\n\n            const insertOperation = `insert_${operation}_one`;\n            const insertType = `${operation}_insert_input`;\n            console.log(metaData?.id);\n            let id = 'id';\n            if (metaData?.id) {\n                id = metaData?.id;\n            }\n            const { query, variables: gqlVariables } = gql.mutation({\n                operation: insertOperation,\n                variables: {\n                    object: {\n                        type: insertType,\n                        value: variables,\n                        required: true,\n                    },\n                },\n                fields: metaData?.fields ?? [id, ...Object.keys(variables)],\n            });\n            console.log(gqlVariables);\n            console.log(query);\n            const response = await client.request(query, gqlVariables);\n\n            return {\n                data: response[insertOperation],\n            };\n        },\n\n        createMany: async ({ resource, variables, metaData }) => {\n            const operation = metaData?.operation ?? resource;\n\n            const insertOperation = `insert_${operation}`;\n            const insertType = `[${operation}_insert_input!]`;\n\n            const { query, variables: gqlVariables } = gql.mutation({\n                operation: insertOperation,\n                variables: {\n                    objects: {\n                        type: insertType,\n                        value: variables,\n                        required: true,\n                    },\n                },\n                fields: [\n                    {\n                        returning: metaData?.fields ?? [\"term_id\"],\n                    },\n                ],\n            });\n\n            const response = await client.request(query, gqlVariables);\n\n            return {\n                data: response[insertOperation][\"returning\"],\n            };\n        },\n\n        update: async ({ resource, id, variables, metaData }) => {\n            const operation = metaData?.operation ?? resource;\n\n            const updateOperation = `update_${operation}_by_pk`;\n\n            const pkColumnsType = `${operation}_pk_columns_input`;\n            const setInputType = `${operation}_set_input`;\n\n            const { query, variables: gqlVariables } = gql.mutation({\n                operation: updateOperation,\n                variables: {\n                    pk_columns: {\n                        type: pkColumnsType,\n                        value: {\n                            id: id,\n                        },\n                        required: true,\n                    },\n                    _set: {\n                        type: setInputType,\n                        value: variables,\n                        required: true,\n                    },\n                },\n                fields: metaData?.fields ?? [\"id\"],\n            });\n\n            const response = await client.request(query, gqlVariables);\n\n            return {\n                data: response[updateOperation],\n            };\n        },\n        updateMany: async ({ resource, ids, variables, metaData }) => {\n            const operation = metaData?.operation ?? resource;\n\n            const updateOperation = `update_${operation}`;\n\n            const whereType = `${operation}_bool_exp`;\n            const setInputType = `${operation}_set_input`;\n\n            const { query, variables: gqlVariables } = gql.mutation({\n                operation: updateOperation,\n                variables: {\n                    where: {\n                        type: whereType,\n                        value: {\n                            id: {\n                                _in: ids,\n                            },\n                        },\n                        required: true,\n                    },\n                    _set: {\n                        type: setInputType,\n                        value: variables,\n                        required: true,\n                    },\n                },\n                fields: [\n                    {\n                        returning: metaData?.fields ?? [\"id\"],\n                    },\n                ],\n            });\n\n            const response = await client.request(query, gqlVariables);\n\n            return {\n                data: response[updateOperation][\"returning\"],\n            };\n        },\n\n        deleteOne: async ({ resource, id, metaData }) => {\n            const operation = metaData?.operation ?? resource;\n\n            const deleteOperation = `delete_${operation}_by_pk`;\n\n            const { query, variables } = gql.mutation({\n                operation: deleteOperation,\n                variables: {\n                    id: { value: id, type: \"uuid\", required: true },\n                    ...metaData?.variables,\n                },\n                fields: metaData?.fields ?? [\"id\"],\n            });\n\n            const response = await client.request(query, variables);\n\n            return {\n                data: response[deleteOperation],\n            };\n        },\n\n        deleteMany: async ({ resource, ids, metaData }) => {\n            const operation = metaData?.operation ?? resource;\n\n            const deleteOperation = `delete_${operation}`;\n\n            const whereType = `${operation}_bool_exp`;\n\n            const { query, variables } = gql.mutation({\n                operation: deleteOperation,\n                fields: [\n                    {\n                        returning: metaData?.fields ?? [\"id\"],\n                    },\n                ],\n                variables: metaData?.variables ?? {\n                    where: {\n                        type: whereType,\n                        required: true,\n                        value: {\n                            id: {\n                                _in: ids,\n                            },\n                        },\n                    },\n                },\n            });\n\n            const result = await client.request(query, variables);\n\n            return {\n                data: result[deleteOperation][\"returning\"],\n            };\n        },\n\n        getApiUrl: () => {\n            throw new Error(\n                \"getApiUrl method is not implemented on refine-hasura data provider.\",\n            );\n        },\n\n        custom: async ({ url, method, headers, metaData }) => {\n            let gqlClient = client;\n\n            if (url) {\n                gqlClient = new GraphQLClient(url, { headers });\n            }\n\n            if (metaData) {\n                if (metaData.operation) {\n                    if (method === \"get\") {\n                        const { query, variables } = gql.query({\n                            operation: metaData.operation,\n                            fields: metaData.fields,\n                            variables: metaData.variables,\n                        });\n\n                        const response = await gqlClient.request(\n                            query,\n                            variables,\n                        );\n\n                        return {\n                            data: response[metaData.operation],\n                        };\n                    } else {\n                        const { query, variables } = gql.mutation({\n                            operation: metaData.operation,\n                            fields: metaData.fields,\n                            variables: metaData.variables,\n                        });\n\n                        const response = await gqlClient.request(\n                            query,\n                            variables,\n                        );\n\n                        return {\n                            data: response[metaData.operation],\n                        };\n                    }\n                } else {\n                    throw Error(\"GraphQL operation name required.\");\n                }\n            } else {\n                throw Error(\n                    \"GraphQL need to operation, fields and variables values in metaData object.\",\n                );\n            }\n        },\n    };\n};\n\nexport default dataProvider;\n","import {\n    List,\n    Table,\n    useTable,\n    IResourceComponentsProps,\n    Space,\n    getDefaultSortOrder,\n    CreateButton,\n    ShowButton,\n    DeleteButton,\n    EditButton\n  } from \"@pankod/refine\";\n  import {  IPost } from \"interfaces\";\n  export const PostList: React.FC<IResourceComponentsProps> = () => {\n    const { tableProps,sorter } = useTable<IPost>({\n      initialSorter: [\n        {\n          field: \"ID\",\n          order: \"asc\"\n        }\n      ],\n      metaData: {\n        fields: [\n          \"ID\",\n          \"post_content\",\n        ]\n      }\n    });\n    \n  return (\n    <List\n      pageHeaderProps={{\n        extra: (\n          <Space>\n \n            <CreateButton />\n          </Space>\n        )\n      }}\n    >\n           <Table {...tableProps} rowKey=\"ID\">\n           <Table.Column\n          key=\"ID\"\n          dataIndex=\"ID\"\n          title=\"ID\"\n          sorter={{ multiple: 2 }}\n          defaultSortOrder={getDefaultSortOrder(\"ID\", sorter)}\n        />\n           <Table.Column\n          key=\"post_content\"\n          dataIndex=\"post_content\"\n          title=\"Post Content\"\n          sorter={{ multiple: 1 }}\n        />\n                <Table.Column<IPost>\n          title=\"Actions\"\n          dataIndex=\"actions\"\n          render={(_, record) => {\n            return (\n              <Space>\n                <EditButton hideText size=\"small\" recordItemId={record.ID} />\n                <ShowButton hideText size=\"small\" recordItemId={record.ID} />\n                <DeleteButton hideText size=\"small\" recordItemId={record.ID} />\n              </Space>\n            );\n          }}\n        />\n           </Table>\n   \n    </List>\n  );\n}","import {\n    List,\n    Table,\n    useTable,\n    Space,\n    CreateButton,\n    EditButton,\n    IResourceComponentsProps,\n} from \"@pankod/refine\";\n\nimport { ITax } from \"interfaces\";\nexport const TaxList: React.FC<IResourceComponentsProps> = () => {\n    const { tableProps } = useTable<ITax>({\n        initialSorter: [{\n            field: \"ID\",\n            order: \"asc\"\n        }],\n        metaData: {\n            fields: [\n                \"ID\",\n                \"slug\",\n            ]\n        }\n    });\n    return (\n        <List\n            pageHeaderProps={{\n                extra: (<Space>\n                    <CreateButton />\n                </Space>)\n            }}\n        >\n            <Table {...tableProps} rowKey=\"ID\">\n                <Table.Column\n                    key=\"ID\"\n                    dataIndex=\"ID\"\n                    title=\"ID\" />\n                <Table.Column\n                    key=\"slug\"\n                    dataIndex=\"slug\"\n                    title=\"Slug\" />\n                <Table.Column\n                    title=\"Actions\"\n                    dataIndex=\"actions\"\n                    render={(_, record:ITax) => {\n                        console.log(record.slug);\n                        return (\n                            <Space>\n                                <EditButton recordItemId={record.ID}  />\n                            </Space>\n                        )\n                    }}\n                />\n            </Table>\n        </List>)\n}","import React from \"react\";\nimport {\n    Edit,\n    Form,\n    HttpError,\n    Input,\n    IResourceComponentsProps,\n    useForm,\n} from \"@pankod/refine\";\n\nimport { ITax } from \"interfaces\";\n\nexport const TaxEdit: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps } = useForm<\n        ITax,\n        HttpError,\n        ITax\n    >({\n        metaData: {\n            operation: \"taxonomy\",\n            fields: [\n                \"ID\",\n            ],\n        },\n    });\n\n    return (\n        <Edit saveButtonProps={saveButtonProps}>\n            <Form\n                {...formProps}\n                layout=\"vertical\"\n\n            >\n                <Form.Item\n                    label=\"Slug\"\n                    name=\"slug\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n\n            </Form>\n        </Edit>\n    );\n};\n","import React  from \"react\";\nimport {\n    Create,\n    Form,\n    Input,\n    IResourceComponentsProps,\n    useForm,\n} from \"@pankod/refine\";\n\nimport { ITax } from \"interfaces\";\n\nexport const TaxCreate: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps } = useForm<ITax>();\n\n    return (\n        <Create saveButtonProps={saveButtonProps}>\n            <Form {...formProps} layout=\"vertical\">\n                <Form.Item\n                    label=\"Slug\"\n                    name=\"slug\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Create>\n    );\n};\n","import React from \"react\";\nimport {\n    Edit,\n    Form,\n    HttpError,\n    Input,\n    IResourceComponentsProps,\n    useForm,\n} from \"@pankod/refine\";\n\nimport { ITerm } from \"interfaces\";\n\nexport const RegionEdit: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps } = useForm<\n        ITerm,\n        HttpError,\n        ITerm\n    >({\n        resource: \"terms\",\n        metaData: {\n            operation: \"terms\",\n            fields: [\n                \"term_id\",\n                \"name\",\n                \"slug\",\n                { \"term_taxonomies\": [\"term_id\", \"parent\"] },\n            ],\n        },\n    });\n\n    return (\n        <Edit saveButtonProps={saveButtonProps}>\n            <Form\n                {...formProps}\n                layout=\"vertical\"\n\n            >\n                <Form.Item\n                    label=\"Name\"\n                    name=\"name\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Slug\"\n                    name=\"slug\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Edit>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    List,\n    Table,\n    useTable,\n    Space,\n    CreateButton,\n    IResourceComponentsProps,\n    EditButton,\n    useMany,\n} from \"@pankod/refine\";\n\nimport { ITerm, ITax, ITermTax } from \"interfaces\";\nexport const RegionList: React.FC<IResourceComponentsProps> = () => {\n    const [testData, EditTestData] = useState<any>(null);\n    const { tableProps } = useTable<ITermTax>({\n        resource: \"term_taxonomy\",\n        initialFilter: [\n            {\n                field: \"parent\",\n                operator: \"eq\",\n                value: 0,\n            },\n        ],\n        initialSorter: [{\n            field: \"term_id\",\n            order: \"asc\"\n        }],\n        metaData: {\n            fields: [\n                \"term_id\",\n                \"description\",\n                { \"term\": [\"name\", \"slug\", { \"array_terms_parent\": [\"term_id\", \"description\", { \"term\": ['name', 'slug'] }] }] },\n            ]\n        }\n    });\n    const dataFunctin = (e: boolean, data: any) => {\n        let array_terms = data.term.array_terms_parent;\n        if (e && array_terms) {\n            return (\n                <Table dataSource={array_terms}>\n                    <Table.Column\n                        key=\"child_term_id\"\n                        dataIndex=\"term_id\"\n                        title=\"ID\"\n                    />\n                    <Table.Column\n                        key=\"child_name\"\n                        dataIndex={[\"term\", \"name\"]}\n                        title=\"name\"\n                    />\n                    <Table.Column\n                        title=\"Actions\"\n                        dataIndex=\"actions\"\n                        render={(_, record: ITerm) => {\n                            return (\n                                <Space>\n                                    <EditButton recordItemId={record.term_id} />\n                                </Space>\n                            )\n                        }}\n                    />\n                </Table>\n            )\n        }\n        return (\n            <p>Pusto</p>\n        )\n\n    }\n\n    return (\n        <List\n            pageHeaderProps={{\n                extra: (<Space>\n                    <CreateButton />\n                </Space>)\n            }}\n        >\n            <Table {...tableProps} onExpand={(e: boolean, data: any) => EditTestData(dataFunctin(e, data))} expandable={{\n                expandedRowRender: record => <>{testData}</>,\n                rowExpandable: record => record.description !== 'Not Expandable',\n            }} rowKey=\"term_id\">\n                <Table.Column\n                    key=\"term_id\"\n                    dataIndex=\"term_id\"\n                    title=\"ID\"\n                />\n                <Table.Column\n\n                    key=\"name\"\n                    dataIndex={[\"term\", \"name\"]}\n                    title=\"name\" />\n\n                <Table.Column\n                    title=\"Actions\"\n                    dataIndex=\"actions\"\n                    render={(_, record: ITerm) => {\n                        return (\n                            <Space>\n                                <EditButton recordItemId={record.term_id} />\n                            </Space>\n                        )\n                    }}\n                />\n            </Table>\n        </List >)\n}","import React, { useState } from \"react\";\nimport {\n    Create,\n    Form,\n    Input,\n    IResourceComponentsProps,\n    UpdateResponse,\n    Select,\n    useForm,\n    useCreate, useSelect, useCreateMany\n} from \"@pankod/refine\";\nimport { transliterate as slugify } from \"transliteration\";\n\nimport { ITerm } from \"interfaces\";\n/*\n, onMutationSuccess: mutationResultTerm \n*/\nexport const RegionCreate: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps } = useForm<ITerm>({ action: \"create\", resource: \"terms\", metaData: { \"id\": \"term_id\" } });\n    const { mutate } = useCreateMany<ITerm>();\n    const [slug, setSlug] = useState(\"\");\n    const { selectProps: categorySelectProps } = useSelect<ITerm>({\n        resource: \"terms\",\n        optionLabel: \"name\",\n        optionValue: \"term_id\",\n        metaData: {\n            fields: [\"term_id\", \"name\"],\n        }\n    });\n    const testData = (e: any) => {\n        console.log(e);\n        mutate({\n            resource: \"terms\",\n            values: [\n                e\n            ]\n        });\n    }\n    return (\n        <Form onFinish={testData}\n            layout=\"vertical\">\n            <Form.Item\n                label=\"Name\"\n                name=\"name\"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input onChange={(e) => {\n                    console.log(e.target.value);\n                    setSlug(slugify(e.target.value));\n                }} />\n            </Form.Item>\n            <Form.Item\n                label=\"Slug\"\n                name=\"slug\"\n                valuePropName=\"slug\"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input value={slug} />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Parent\"\n                name={[\"termTaxonomiesByTermId\", \"data\", \"parent\"]}\n                initialValue={0}\n            >\n                <Select {...categorySelectProps} />\n            </Form.Item>\n            <Form.Item\n                name={[\"termTaxonomiesByTermId\", \"data\", \"taxonomy\"]}\n                initialValue={'region'}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input hidden={true} value={\"region\"} />\n            </Form.Item>\n            <Form.Item\n                name={[\"termTaxonomiesByTermId\", \"data\", \"description\"]}\n                initialValue={'description term'}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input hidden={true} value={\"1\"} />\n            </Form.Item>\n            <Form.Item\n                name={[\"termTaxonomiesByTermId\", \"data\", \"count\"]}\n                initialValue={0}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input hidden={true} defaultValue={1} value={\"1\"} />\n            </Form.Item>\n            <Form.Item\n                initialValue={1}\n                name=\"term_group\"\n            >\n                <Input hidden={true} defaultValue={1} value={\"1\"} />\n            </Form.Item>\n            <Input type={'submit'} value={'save'} />\n        </Form>\n    );\n};\n","import React from \"react\";\nimport {\n    Create,\n    Form,\n    Input,\n    IResourceComponentsProps,\n    Select,\n    useForm,\n    Cascader,\n    useSelect\n} from \"@pankod/refine\";\n\nimport { ITerm, IPost, ITermTax } from \"interfaces\";\n\nexport const PostCreate: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps } = useForm<IPost>({ action: \"create\", resource: \"posts\", metaData: { \"id\": \"ID\" } });\n\n    const { selectProps: categorySelectProps, queryResult: queryResultRegion } = useSelect<ITermTax>({\n        resource: \"term_taxonomy\",\n        filters: [\n            {\n                field: \"parent\",\n                operator: \"eq\",\n                value: 0,\n            },\n        ],\n        metaData: {\n            fields: [\"term_id\", \"term_taxonomy_id\", { \"terms\": [\"term_id\", { \"term\": [\"name\"] }] }],\n        }\n\n    });\n    console.log(queryResultRegion);\n    const options = [\n        {\n            value: 'zhejiang',\n            label: 'Zhejiang',\n            children: [\n                {\n                    value: 'hangzhou',\n                    label: 'Hangzhou',\n                    children: [\n                        {\n                            value: 'xihu',\n                            label: 'West Lake',\n                            code: 752100,\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            value: 'jiangsu',\n            label: 'Jiangsu',\n            children: [\n                {\n                    value: 'nanjing',\n                    label: 'Nanjing',\n                    children: [\n                        {\n                            value: 'zhonghuamen',\n                            label: 'Zhong Hua Men',\n                            code: 453400,\n                        },\n                    ],\n                },\n            ],\n        },\n    ];\n\n\n    return (\n        <Create>\n            <Form {...formProps}\n                layout=\"vertical\">\n                <Form.Item\n                    label=\"Name\"\n                    name=\"name\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Slug\"\n                    name=\"slug\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n\n\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Region\"\n                    name={\"region\"}\n                >\n                    <Cascader options={queryResultRegion.data?.data} fieldNames={{ label: \"term_id\", value: \"term_id\", children: \"terms\" }} style={{ width: '100%' }} />\n                </Form.Item>\n\n                <Form.Item\n                    label=\"Parent\"\n                    name={[\"termTaxonomiesByTermId\", \"data\", \"parent\"]}\n                    initialValue={0}\n                >\n                    <Select {...categorySelectProps} />\n                </Form.Item>\n                <Form.Item\n                    name={[\"termTaxonomiesByTermId\", \"data\", \"taxonomy\"]}\n                    initialValue={'region'}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input hidden={true} value={\"region\"} />\n                </Form.Item>\n\n                <Form.Item\n                    name={[\"termTaxonomiesByTermId\", \"data\", \"description\"]}\n                    initialValue={'description term'}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n\n                >\n                    <Input hidden={true} value={\"1\"} />\n                </Form.Item>\n                <Form.Item\n                    name={[\"termTaxonomiesByTermId\", \"data\", \"count\"]}\n                    initialValue={0}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input hidden={true} defaultValue={1} value={\"1\"} />\n                </Form.Item>\n                <Form.Item\n                    initialValue={1}\n                    name=\"term_group\"\n                >\n                    <Input hidden={true} defaultValue={1} value={\"1\"} />\n                </Form.Item>\n\n                <Input type={'submit'} value={'save'} />\n\n            </Form>\n        </Create>\n    );\n};\n","import { IResourceComponentsProps } from \"@pankod/refine\"\n\nexport const EditPost: React.FC<IResourceComponentsProps> = () => {\n    return <p>Test</p>\n}","import { Refine } from \"@pankod/refine\";\n\nimport \"@pankod/refine/dist/styles.min.css\";\nimport dataProvider from \"hasura\";\nimport routerProvider from \"@pankod/refine-react-router\";\n//import dataProvider from \"@pankod/refine-hasura\";\nimport { GraphQLClient } from \"graphql-request\";\nimport { PostList } from \"pages/posts\";\nimport { TaxList, TaxCreate, TaxEdit } from \"pages/taxonomy\";\nimport { RegionList, RegionCreate, RegionEdit } from \"pages/regions\";\nimport { PostCreate } from \"pages/posts/create\";\nimport { EditPost } from \"pages/posts/edit\";\nconst API_URL = \"http://localhost:8080/v1/graphql\";\nconst client = new GraphQLClient(API_URL);\nconst gqlDataProvider = dataProvider(client);\nfunction App() {\n  return <Refine routerProvider={routerProvider} dataProvider={gqlDataProvider} resources={[\n    {\n      name: \"posts\",\n      list: PostList,\n      edit: EditPost,\n      create: PostCreate,\n    },\n    {\n      name: \"taxonomy\",\n      list: TaxList,\n      edit: TaxEdit,\n      create: TaxCreate,\n    },\n    {\n      name: \"region\",\n      list: RegionList,\n      edit: RegionEdit,\n      create: RegionCreate,\n    }\n  ]} />\n\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}